server {
    server_name 47.113.98.224 youxiheai.xin www.youxiheai.xin;  # 替换为您的服务器IP或域名

    if ($host = youxiheai.xin) {
        return 301 https://www.youxiheai.xin$request_uri;
    } 
    
    # 开启gzip压缩
    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;
    gzip_proxied any;

    # 静态资源缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
   
	# 启用缓存
        expires 30d;  # 设置缓存时间为30天
        add_header Cache-Control "public, max-age=2592000";  # 缓存控制头，单位为秒（30天 = 2592000秒）
        add_header Pragma public;  # 兼容HTTP/1.0缓存
    }

     # HTML页面访问服务
    location /pages/ {
        proxy_pass http://127.0.0.1:3000/pages/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 添加CORS头
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    }

    location /page/ {
        proxy_pass http://127.0.0.1:3000/page/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 添加CORS头
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    }

    # 上传接口
    location /html-upload/ {
        proxy_pass http://127.0.0.1:3000/upload/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

   	 # 处理预检请求（OPTIONS）
        if ($request_method = 'OPTIONS') {
       	    add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            return 204;
        }
        # 上传文件大小限制
        client_max_body_size 5M;

        # 增加超时时间
        proxy_connect_timeout 60;
        proxy_send_timeout 60;
        proxy_read_timeout 60;
    }

    # Admin后台相关接口的Nginx转发配置

    # 所有以 /api/admin/ 开头的请求，都将被转发到Node.js服务
    location /api/admin/ {
        # 将请求转发到运行在本地3000端口的Node.js应用
        proxy_pass http://127.0.0.1:3000;

        # 设置必要的请求头，以便后端应用能获取到真实的客户端信息
        # Host 头用于指定原始请求的域名
        proxy_set_header Host $host;
        
        # X-Real-IP 头用于传递客户端的真实IP地址
        proxy_set_header X-Real-IP $remote_addr;
        
        # X-Forwarded-For 是一个标准头部，用于追踪请求经过的代理服务器IP链
        # 您的代码中 getClientIp 函数依赖这个头来获取IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # X-Forwarded-Proto 用于告知后端，原始请求使用的是HTTP还是HTTPS
        proxy_set_header X-Forwarded-Proto $scheme;

        # 以下两行用于支持 WebSocket（如果需要的话），是Node.js代理的推荐配置
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
    }

    # 为了兼容您代码中可能存在的旧接口 /admin/login 和 /admin/statistics
    # 建议也为它们添加精确匹配的转发规则
    location = /admin/login {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /admin/statistics {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # 反向代理到Node.js应用
    location / {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_cache_bypass $http_upgrade;
        
        # 解决跨域问题
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        
        # 处理 OPTIONS 请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # 错误页面
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/youxiheai.xin/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/youxiheai.xin/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}
server {
    if ($host = www.youxiheai.xin) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = youxiheai.xin) {
        return 301 https://www.youxiheai.xin$request_uri;
    } # managed by Certbot


    listen 80;
    server_name 47.113.98.224 youxiheai.xin www.youxiheai.xin;
    return 404; # managed by Certbot




}
